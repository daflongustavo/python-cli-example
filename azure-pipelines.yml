# trigger:
# - main

parameters:
  - name: USERS_EMAILS_TO_NOTIFY
    type: object
    default: 
    - 'gustavodaflon@seventechnologies.cloud'
    - 'leonardoviana@seventechnologies.cloud'


variables:
- group: python-cli-example-lib

jobs:
- job: CheckProjectVersionAndPublish
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
  - script: |
      latest_version=$(curl -s https://pypi.org/pypi/${app_name}/json | jq -r .info.version)
      echo "Latest version on PyPI: $latest_version"

      local_version=$(grep -oP "(?<=version=')[^']+" setup.py)
      echo "Local version in setup.py: $local_version"

      if [ "$latest_version" != "$local_version" ]; then
        echo "Versions are different. Uploading to PyPI."
        pip3 install pyinstaller
        pip3 install twine
        python3 setup.py sdist
        python3 -m twine upload dist/* --username __token__ --password $(pip_api_key)
      else
        echo "Versions are the same. Skipping PyPI upload."
      fi

- job: PublishPackageToChocolatey
  pool:
    vmImage: 'windows-latest'
  variables:
    NEEDS_MANUAL_APPROVAL: $[equals(variables['choco_cli_version'], variables['nuspecVersion'])]
  steps:
  - powershell: |
      pip install pyinstaller
    displayName: 'Install PyInstaller'

  - script: |
      # Obter a versão do arquivo .nuspec
      $nuspecVersion = [xml](Get-Content -Path path/to/your.nuspec).package.metadata.version

      # Comparar com o valor de choco_cli_version
      if ($env:choco_cli_version -lt $nuspecVersion) {
          Write-Error "Value for variable choco_cli_version = '$($env:choco_cli_version)' does not match the one in .nuspec file: nuspec_version."
          exit 1
      }
      elseif ($env:choco_cli_version -eq $nuspecVersion) {
          # Aprovação manual
          if ($env:NEEDS_MANUAL_APPROVAL -eq $true) {
              Write-Host "Requesting manual approval..."
              
              # Task de validação manual
              - task: ManualValidation@0
                timeoutInMinutes: 1440
                inputs:
                  notifyUsers: |
                    ${{ parameters.USERS_EMAILS_TO_NOTIFY }}
                  instructions: "Are you sure you want to update the CLI version? A new package will be generated and will be sent to Chocolatey's approval process."
                  onTimeout: "reject"
                  
              # Se aprovado, continue
              Write-Host "Manual approval received. Continuing..."
          }

          # Se aceitar a aprovação manual ou não for necessária
          # Execute os comandos após pyinstaller
          pyinstaller $(spec_file_name).spec

          # Execute os comandos e substitua os valores em VERIFICATION.txt
          $sha256Hash = Get-FileHash -Path "./dist/${app_name}.exe" -Algorithm SHA256 | Select-Object -ExpandProperty Hash
          $md5Hash = Get-FileHash "./dist/${app_name}.exe" -Algorithm MD5 | Select-Object -ExpandProperty Hash

          # Substitua os valores em VERIFICATION.txt
          $verificationPath = "./tools/VERIFICATION.txt"
          (Get-Content -Path $verificationPath) -replace 'MD5: .+', "MD5: $md5Hash" -replace 'SHA-256: .+', "SHA-256: $sha256Hash" | Set-Content -Path $verificationPath
      }
      else {
          Write-Host "The choco_cli_version is greater than the version in .nuspec. No additional action needed."
      }
    displayName: 'Publish Package to Chocolatey'
